%% plot_robot.m
%
% Description:
%   Plots the robot in its current configuration.
%   
% Inputs:
%   q: robot configuration, q = [x_cart; theta_pend];
%   params: a struct with many elements, generated by calling init_params.m
%   varargin:
%
% Outputs:
%   none
%
% Notes:
%   1) This code is written verbosely in the hope that it is clear how to
%   extend it to visualizing other more complex robots.

function plot_robot(q,params,varargin)
%% Parse input arguments
% Note: a simple robot plotting function doesn't need this, but I want to
% write extensible code, so I'm using "varargin" which requires input
% parsing. See the reference below:
%
% https://people.umass.edu/whopper/posts/better-matlab-functions-with-the-inputparser-class/

% Step 1: instantiate an inputParser:
p = inputParser;

% Step 2: create the parsing schema:
%      2a: required inputs:
addRequired(p,'cart_pend_config', ...
    @(q) isnumeric(q) && size(q,1)==2 && size(q,2)==1);
addRequired(p,'cart_pend_params', ...
    @(params) ~isempty(params));
%      2b: optional inputs:
addParameter(p, 'new_fig', false); % if true, plot will be on a new figure
%       optional name-value pairs to trace different parts of the robot:
addParameter(p, 'trace_cart_com', false);
addParameter(p, 'trace_pend_com', false);
addParameter(p, 'trace_pend_tip', false);

% Step 3: parse the inputs:
parse(p, q, params, varargin{:});

% Verification: display the results of parsing:
disp(p.Results)


%% Compute the 4 corners of the cart, clockwise from top left corner
% First compute the cart's home position (q(1) = 0):
cart.home.upp_left.x    = -0.5*params.model.geom.cart.w;
cart.home.upp_left.y    = 0.5*params.model.geom.cart.h;

cart.home.upp_right.x   = 0.5*params.model.geom.cart.w;
cart.home.upp_right.y   = 0.5*params.model.geom.cart.h;

cart.home.low_right.x   = 0.5*params.model.geom.cart.w;
cart.home.low_right.y   = -0.5*params.model.geom.cart.h;

cart.home.low_left.x    = -0.5*params.model.geom.cart.w;
cart.home.low_left.y    = -0.5*params.model.geom.cart.h;

cart.home.corners = horzcat([cart.home.upp_left.x; cart.home.upp_left.y],...
                            [cart.home.upp_right.x; cart.home.upp_right.y],...
                            [cart.home.low_right.x; cart.home.low_right.y],...
                            [cart.home.low_left.x;  cart.home.low_left.y]);

% The cart can translate horizontally by q(1) but cannot translate
% vertically or rotate, so we don't bother computing a homogeneous
% transformation matrix in SE(2) for the cart. Instead we do the math
% explicitly:
cart.curr.corners = [q(1); 0] + cart.home.corners;

%% Compute the 4 corners of the pendulum
% The pendulum is a rectangle whose center is q(1) = x_cart. The pendulum
% can translate horizontally and can rotate, so we first compute a 
% homogeneous transformation matrix T_pend in SE(2):

T_pend = [cos(q(2)), -sin(q(2)), q(1);
          sin(q(2)),  cos(q(2)), 0;
          0,          0,         1];

% We first compute the 4 corners of the pendulum when the robot is in the
% "home" configuration (q(1) = q(2) = 0):
pend.home.upp_left.x    = 0;
pend.home.upp_left.y    = 0.5*params.model.geom.pend.w;

pend.home.upp_right.x   = params.model.geom.pend.l;
pend.home.upp_right.y   = 0.5*params.model.geom.pend.w;

pend.home.low_right.x   = params.model.geom.pend.l;
pend.home.low_right.y   = -0.5*params.model.geom.pend.w;

pend.home.low_left.x    = 0;
pend.home.low_left.y    = -0.5*params.model.geom.pend.w;

pend.home.corners = horzcat([pend.home.upp_left.x; pend.home.upp_left.y;   1],...
                            [pend.home.upp_right.x; pend.home.upp_right.y; 1],...
                            [pend.home.low_right.x; pend.home.low_right.y; 1],...
                            [pend.home.low_left.x;  pend.home.low_left.y;  1]);

% Now compute the 4 corners of the pendulum after undergoing planar
% translation + rotation as described by T_pend:
pend.curr.corners = T_pend*pend.home.corners;

%% Evaluate forward kinematics at points of interest
FK = fwd_kin(q,params);

% (x,y) location of cart CoM:
cart.curr.com.x = FK(1,1);
cart.curr.com.y = FK(2,1);

% (x,y) location of pendulum CoM:
pend.curr.com.x = FK(1,2);
pend.curr.com.y = FK(2,2);

% (x,y) location of pendulum tip:
pend.curr.tip.x = FK(1,3);
pend.curr.tip.y = FK(2,3);

%% Display the cart, pendulum, and the pendulum's CoM
if p.Results.new_fig
    figure;
end

hold on;
fill(cart.curr.corners(1,:),cart.curr.corners(2,:),params.viz.colors.cart);
axis equal;
fill(pend.curr.corners(1,:),pend.curr.corners(2,:),params.viz.colors.pend);
plot(pend.curr.com.x,pend.curr.com.y,'o','MarkerSize',20,...
    'MarkerFaceColor',params.viz.colors.pend_com);
if p.Results.trace_cart_com
    plot(cart.curr.com.x,cart.curr.com.y,'o','MarkerSize',5,...
        'MarkerFaceColor',params.viz.colors.tracers.cart_com);
end
if p.Results.trace_pend_com
    plot(pend.curr.com.x,pend.curr.com.y,'o','MarkerSize',5,...
        'MarkerFaceColor',params.viz.colors.tracers.pend_com);
end
if p.Results.trace_pend_tip
    plot(pend.curr.tip.x,pend.curr.tip.y,'o','MarkerSize',5,...
        'MarkerFaceColor',params.viz.colors.tracers.pend_tip);
end
hold off;

xlabel('$x$');
ylabel('$y$');

end